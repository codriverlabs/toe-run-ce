name: Comprehensive CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  GO_VERSION: '1.24'

jobs:
  # Phase 1: Validation
  lint-yaml:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'

      - name: Install yamllint
        run: pip install yamllint

      - name: Run yamllint
        run: yamllint -d relaxed .

  # Phase 2: Go Testing
  test-go:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Generate code
        run: make generate

      - name: Run tests
        run: go test -v ./...

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

  # Phase 3: Build Validation
  build-controller:
    runs-on: ubuntu-latest
    needs: [lint-yaml, test-go]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate code
        run: make generate

      - name: Build controller
        run: go build -o bin/manager cmd/main.go

      - name: Test make targets
        run: |
          make manifests
          make generate
          make build-installer

  # Phase 4: Kubernetes Validation
  validate-k8s:
    runs-on: ubuntu-latest
    needs: [build-controller]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate manifests
        run: make manifests

      - name: Validate CRDs
        run: |
          # Check if CRDs are valid YAML
          for crd in config/crd/bases/*.yaml; do
            echo "Validating $crd"
            python -c "import yaml; yaml.safe_load(open('$crd'))"
          done

      - name: Validate Kustomize builds
        run: |
          make kustomize
          ./bin/kustomize build config/default > /dev/null
          ./bin/kustomize build config/crd > /dev/null
